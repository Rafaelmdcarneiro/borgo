use io
use time
// use syscall
use io.fs


fn Chdir  (dir: string) -> error { EXT }

fn Chmod  (name: string, mode: FileMode) -> error { EXT }

fn Chown  (name: string, uid: int, gid: int) -> error { EXT }

fn Chtimes  (name: string, atime: time.Time, mtime: time.Time) -> error { EXT }

fn Clearenv  () -> () { EXT }

fn Create  (name: string) -> Result<*File> { EXT }

fn CreateTemp  (dir: string, pattern: string) -> Result<*File> { EXT }

fn DirFS  (dir: string) -> fs.FS { EXT }

fn Environ  () -> [string] { EXT }

fn Executable  () -> Result<string> { EXT }

fn Exit  (code: int) -> () { EXT }

fn Expand  (s: string, mapping: fn (param0: string) -> string) -> string { EXT }

fn ExpandEnv  (s: string) -> string { EXT }

fn FindProcess  (pid: int) -> Result<*Process> { EXT }

fn Getegid  () -> int { EXT }

fn Getenv  (key: string) -> string { EXT }

fn Geteuid  () -> int { EXT }

fn Getgid  () -> int { EXT }

fn Getgroups  () -> Result<[int]> { EXT }

fn Getpagesize  () -> int { EXT }

fn Getpid  () -> int { EXT }

fn Getppid  () -> int { EXT }

fn Getuid  () -> int { EXT }

fn Getwd  () -> Result<string> { EXT }

fn Hostname  () -> Result<string> { EXT }

fn IsExist  (err: error) -> bool { EXT }

fn IsNotExist  (err: error) -> bool { EXT }

fn IsPathSeparator  (c: uint8) -> bool { EXT }

fn IsPermission  (err: error) -> bool { EXT }

fn IsTimeout  (err: error) -> bool { EXT }

fn Lchown  (name: string, uid: int, gid: int) -> error { EXT }

fn Link  (oldname: string, newname: string) -> error { EXT }

fn LookupEnv  (key: string) -> Option<string> { EXT }

fn Lstat  (name: string) -> Result<FileInfo> { EXT }

fn Mkdir  (name: string, perm: FileMode) -> error { EXT }

fn MkdirAll  (path: string, perm: FileMode) -> error { EXT }

fn MkdirTemp  (dir: string, pattern: string) -> Result<string> { EXT }

fn NewFile  (fd: uintptr, name: string) -> *File { EXT }

fn NewSyscallError  (syscall: string, err: error) -> error { EXT }

fn Open  (name: string) -> Result<*File> { EXT }

fn OpenFile  (name: string, flag: int, perm: FileMode) -> Result<*File> { EXT }

fn Pipe  () -> (*File, *File, error) { EXT }

fn ReadDir  (name: string) -> Result<[DirEntry]> { EXT }

fn ReadFile  (name: string) -> Result<[byte]> { EXT }

fn Readlink  (name: string) -> Result<string> { EXT }

fn Remove  (name: string) -> error { EXT }

fn RemoveAll  (path: string) -> error { EXT }

fn Rename  (oldpath: string, newpath: string) -> error { EXT }

fn SameFile  (fi1: FileInfo, fi2: FileInfo) -> bool { EXT }

fn Setenv  (key: string, value: string) -> error { EXT }

fn StartProcess  (name: string, argv: [string], attr: *ProcAttr) -> Result<*Process> { EXT }

fn Stat  (name: string) -> Result<FileInfo> { EXT }

fn Symlink  (oldname: string, newname: string) -> error { EXT }

fn TempDir  () -> string { EXT }

fn Truncate  (name: string, size: int64) -> error { EXT }

fn Unsetenv  (key: string) -> error { EXT }

fn UserCacheDir  () -> Result<string> { EXT }

fn UserConfigDir  () -> Result<string> { EXT }

fn UserHomeDir  () -> Result<string> { EXT }

fn WriteFile  (name: string, data: [byte], perm: FileMode) -> error { EXT }

impl (self: File) {

fn Chdir  () -> error { EXT }

fn Chmod  (mode: FileMode) -> error { EXT }

fn Chown  (uid: int, gid: int) -> error { EXT }

fn Close  () -> error { EXT }

fn Fd  () -> uintptr { EXT }

fn Name  () -> string { EXT }

fn Read  (b: [byte]) -> Result<int> { EXT }

fn ReadAt  (b: [byte], off: int64) -> Result<int> { EXT }

fn ReadDir  (n: int) -> Result<[DirEntry]> { EXT }

fn ReadFrom  (r: io.Reader) -> Result<int64> { EXT }

fn Readdir  (n: int) -> Result<[FileInfo]> { EXT }

fn Readdirnames  (n: int) -> Result<[string]> { EXT }

fn Seek  (offset: int64, whence: int) -> Result<int64> { EXT }

fn SetDeadline  (t: time.Time) -> error { EXT }

fn SetReadDeadline  (t: time.Time) -> error { EXT }

fn SetWriteDeadline  (t: time.Time) -> error { EXT }

fn Stat  () -> Result<FileInfo> { EXT }

fn Sync  () -> error { EXT }

fn SyscallConn  () -> Result<any> { EXT }

fn Truncate  (size: int64) -> error { EXT }

fn Write  (b: [byte]) -> Result<int> { EXT }

fn WriteAt  (b: [byte], off: int64) -> Result<int> { EXT }

fn WriteString  (s: string) -> Result<int> { EXT }

}

impl (self: LinkError) {

fn Error  () -> string { EXT }

fn Unwrap  () -> error { EXT }

}

impl (self: Process) {

fn Kill  () -> error { EXT }

fn Release  () -> error { EXT }

fn Signal  (sig: Signal) -> error { EXT }

fn Wait  () -> Result<*ProcessState> { EXT }

}

impl (self: ProcessState) {

fn ExitCode  () -> int { EXT }

fn Exited  () -> bool { EXT }

fn Pid  () -> int { EXT }

fn String  () -> string { EXT }

fn Success  () -> bool { EXT }

fn Sys  () -> any { EXT }

fn SysUsage  () -> any { EXT }

fn SystemTime  () -> time.Duration { EXT }

fn UserTime  () -> time.Duration { EXT }

}

impl (self: SyscallError) {

fn Error  () -> string { EXT }

fn Timeout  () -> bool { EXT }

fn Unwrap  () -> error { EXT }

}

type DirEntry = fs.DirEntry

type FileInfo = fs.FileInfo

type FileMode = fs.FileMode

type PathError = fs.PathError

struct File{

}

struct LinkError{
  Op: string,
  Old: string,
  New: string,
  Err: error
}

struct ProcAttr{
  Dir: string,
  Env: [string],
  Files: [*File],
  Sys: *any
}

struct Process{
  Pid: int
}

struct ProcessState{

}

interface Signal {

  fn String () -> string
  fn Signal () -> ()
}

struct SyscallError{
  Syscall: string,
  Err: error
}