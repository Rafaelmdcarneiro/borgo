use unsafe


fn Append  (s: Value, x: VarArgs<Value>) -> Value { EXT }

fn AppendSlice  (s: Value, t: Value) -> Value { EXT }

fn ArrayOf  (length: int, elem: Type) -> Type { EXT }

fn ChanOf  (dir: ChanDir, t: Type) -> Type { EXT }

fn Copy  (dst: Value, src: Value) -> int { EXT }

fn DeepEqual  (x: any, y: any) -> bool { EXT }

fn FuncOf  (in_: [Type], out: [Type], variadic: bool) -> Type { EXT }

fn Indirect  (v: Value) -> Value { EXT }

fn MakeChan  (typ: Type, buffer: int) -> Value { EXT }

fn MakeFunc  (typ: Type, fn_: fn (args: [Value]) -> [Value]) -> Value { EXT }

fn MakeMap  (typ: Type) -> Value { EXT }

fn MakeMapWithSize  (typ: Type, n: int) -> Value { EXT }

fn MakeSlice  (typ: Type, len: int, cap: int) -> Value { EXT }

fn MapOf  (key: Type, elem: Type) -> Type { EXT }

fn New  (typ: Type) -> Value { EXT }

fn NewAt  (typ: Type, p: unsafe.Pointer) -> Value { EXT }

fn PointerTo  (t: Type) -> Type { EXT }

fn PtrTo  (t: Type) -> Type { EXT }

fn Select  (cases: [SelectCase]) -> (int, Value, bool) { EXT }

fn SliceOf  (t: Type) -> Type { EXT }

fn StructOf  (fields: [StructField]) -> Type { EXT }

fn Swapper  (slice: any) -> fn (i: int, j: int) -> () { EXT }

fn TypeOf  (i: any) -> Type { EXT }

fn ValueOf  (i: any) -> Value { EXT }

fn VisibleFields  (t: Type) -> [StructField] { EXT }

fn Zero  (typ: Type) -> Value { EXT }

impl (self: ChanDir) {

fn String  () -> string { EXT }

}

impl (self: Kind) {

fn String  () -> string { EXT }

}

impl (self: MapIter) {

fn Key  () -> Value { EXT }

fn Next  () -> bool { EXT }

fn Reset  (v: Value) -> () { EXT }

fn Value  () -> Value { EXT }

}

impl (self: Method) {

fn IsExported  () -> bool { EXT }

}

impl (self: StructField) {

fn IsExported  () -> bool { EXT }

}

impl (self: StructTag) {

fn Get  (key: string) -> string { EXT }

fn Lookup  (key: string) -> Option<string> { EXT }

}

impl (self: Value) {

fn Addr  () -> Value { EXT }

fn Bool  () -> bool { EXT }

fn Bytes  () -> [byte] { EXT }

fn Call  (in_: [Value]) -> [Value] { EXT }

fn CallSlice  (in_: [Value]) -> [Value] { EXT }

fn CanAddr  () -> bool { EXT }

fn CanComplex  () -> bool { EXT }

fn CanConvert  (t: Type) -> bool { EXT }

fn CanFloat  () -> bool { EXT }

fn CanInt  () -> bool { EXT }

fn CanInterface  () -> bool { EXT }

fn CanSet  () -> bool { EXT }

fn CanUint  () -> bool { EXT }

fn Cap  () -> int { EXT }

fn Close  () -> () { EXT }

fn Complex  () -> complex128 { EXT }

fn Convert  (t: Type) -> Value { EXT }

fn Elem  () -> Value { EXT }

fn Field  (i: int) -> Value { EXT }

fn FieldByIndex  (index: [int]) -> Value { EXT }

fn FieldByIndexErr  (index: [int]) -> Result<Value> { EXT }

fn FieldByName  (name: string) -> Value { EXT }

fn FieldByNameFunc  (match_: fn (param0: string) -> bool) -> Value { EXT }

fn Float  () -> float64 { EXT }

fn Index  (i: int) -> Value { EXT }

fn Int  () -> int64 { EXT }

fn Interface  () -> any { EXT }

fn InterfaceData  () -> [uintptr] { EXT }

fn IsNil  () -> bool { EXT }

fn IsValid  () -> bool { EXT }

fn IsZero  () -> bool { EXT }

fn Kind  () -> Kind { EXT }

fn Len  () -> int { EXT }

fn MapIndex  (key: Value) -> Value { EXT }

fn MapKeys  () -> [Value] { EXT }

fn MapRange  () -> *MapIter { EXT }

fn Method  (i: int) -> Value { EXT }

fn MethodByName  (name: string) -> Value { EXT }

fn NumField  () -> int { EXT }

fn NumMethod  () -> int { EXT }

fn OverflowComplex  (x: complex128) -> bool { EXT }

fn OverflowFloat  (x: float64) -> bool { EXT }

fn OverflowInt  (x: int64) -> bool { EXT }

fn OverflowUint  (x: uint64) -> bool { EXT }

fn Pointer  () -> uintptr { EXT }

fn Recv  () -> Option<Value> { EXT }

fn Send  (x: Value) -> () { EXT }

fn Set  (x: Value) -> () { EXT }

fn SetBool  (x: bool) -> () { EXT }

fn SetBytes  (x: [byte]) -> () { EXT }

fn SetCap  (n: int) -> () { EXT }

fn SetComplex  (x: complex128) -> () { EXT }

fn SetFloat  (x: float64) -> () { EXT }

fn SetInt  (x: int64) -> () { EXT }

fn SetIterKey  (iter: *MapIter) -> () { EXT }

fn SetIterValue  (iter: *MapIter) -> () { EXT }

fn SetLen  (n: int) -> () { EXT }

fn SetMapIndex  (key: Value, elem: Value) -> () { EXT }

fn SetPointer  (x: unsafe.Pointer) -> () { EXT }

fn SetString  (x: string) -> () { EXT }

fn SetUint  (x: uint64) -> () { EXT }

fn Slice  (i: int, j: int) -> Value { EXT }

fn Slice3  (i: int, j: int, k: int) -> Value { EXT }

fn String  () -> string { EXT }

fn TryRecv  () -> Option<Value> { EXT }

fn TrySend  (x: Value) -> bool { EXT }

fn Type  () -> Type { EXT }

fn Uint  () -> uint64 { EXT }

fn UnsafeAddr  () -> uintptr { EXT }

fn UnsafePointer  () -> unsafe.Pointer { EXT }

}

impl (self: ValueError) {

fn Error  () -> string { EXT }

}

struct ChanDir(int)

struct Kind(uint)

struct SelectDir(int)

struct StructTag(string)

struct MapIter{

}

struct Method{
  Name: string,
  PkgPath: string,
  Type: Type,
  Func: Value,
  Index: int
}

struct SelectCase{
  Dir: SelectDir,
  Chan: Value,
  Send: Value
}

struct SliceHeader{
  Data: uintptr,
  Len: int,
  Cap: int
}

struct StringHeader{
  Data: uintptr,
  Len: int
}

struct StructField{
  Name: string,
  PkgPath: string,
  Type: Type,
  Tag: StructTag,
  Offset: uintptr,
  Index: [int],
  Anonymous: bool
}

interface Type {

  fn Align () -> int
  fn FieldAlign () -> int
  fn Method (param0: int) -> Method
  fn MethodByName (param0: string) -> Option<Method>
  fn NumMethod () -> int
  fn Name () -> string
  fn PkgPath () -> string
  fn Size () -> uintptr
  fn String () -> string
  fn Kind () -> Kind
  fn Implements (u: Type) -> bool
  fn AssignableTo (u: Type) -> bool
  fn ConvertibleTo (u: Type) -> bool
  fn Comparable () -> bool
  fn Bits () -> int
  fn ChanDir () -> ChanDir
  fn IsVariadic () -> bool
  fn Elem () -> Type
  fn Field (i: int) -> StructField
  fn FieldByIndex (index: [int]) -> StructField
  fn FieldByName (name: string) -> Option<StructField>
  fn FieldByNameFunc (match_: fn (param0: string) -> bool) -> Option<StructField>
  fn In (i: int) -> Type
  fn Key () -> Type
  fn Len () -> int
  fn NumField () -> int
  fn NumIn () -> int
  fn NumOut () -> int
  fn Out (i: int) -> Type
}

struct Value{

}

struct ValueError{
  Method: string,
  Kind: Kind
}