use io


fn Default  () -> *Logger { EXT }

fn Fatal  (v: VarArgs<any>) -> () { EXT }

fn Fatalf  (format: string, v: VarArgs<any>) -> () { EXT }

fn Fatalln  (v: VarArgs<any>) -> () { EXT }

fn Flags  () -> int { EXT }

fn New  (out: io.Writer, prefix: string, flag: int) -> *Logger { EXT }

fn Output  (calldepth: int, s: string) -> error { EXT }

fn Panic  (v: VarArgs<any>) -> () { EXT }

fn Panicf  (format: string, v: VarArgs<any>) -> () { EXT }

fn Panicln  (v: VarArgs<any>) -> () { EXT }

fn Prefix  () -> string { EXT }

fn Print  (v: VarArgs<any>) -> () { EXT }

fn Printf  (format: string, v: VarArgs<any>) -> () { EXT }

fn Println  (v: VarArgs<any>) -> () { EXT }

fn SetFlags  (flag: int) -> () { EXT }

fn SetOutput  (w: io.Writer) -> () { EXT }

fn SetPrefix  (prefix: string) -> () { EXT }

fn Writer  () -> io.Writer { EXT }

impl (self: Logger) {

fn Fatal  (v: VarArgs<any>) -> () { EXT }

fn Fatalf  (format: string, v: VarArgs<any>) -> () { EXT }

fn Fatalln  (v: VarArgs<any>) -> () { EXT }

fn Flags  () -> int { EXT }

fn Output  (calldepth: int, s: string) -> error { EXT }

fn Panic  (v: VarArgs<any>) -> () { EXT }

fn Panicf  (format: string, v: VarArgs<any>) -> () { EXT }

fn Panicln  (v: VarArgs<any>) -> () { EXT }

fn Prefix  () -> string { EXT }

fn Print  (v: VarArgs<any>) -> () { EXT }

fn Printf  (format: string, v: VarArgs<any>) -> () { EXT }

fn Println  (v: VarArgs<any>) -> () { EXT }

fn SetFlags  (flag: int) -> () { EXT }

fn SetOutput  (w: io.Writer) -> () { EXT }

fn SetPrefix  (prefix: string) -> () { EXT }

fn Writer  () -> io.Writer { EXT }

}

struct Logger{

}