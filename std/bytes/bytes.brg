use io
use unicode


fn Compare  (a: [byte], b: [byte]) -> int { EXT }

fn Contains  (b: [byte], subslice: [byte]) -> bool { EXT }

fn ContainsAny  (b: [byte], chars: string) -> bool { EXT }

fn ContainsRune  (b: [byte], r: rune) -> bool { EXT }

fn Count  (s: [byte], sep: [byte]) -> int { EXT }

fn Cut  (s: [byte], sep: [byte]) -> Option<[byte]> { EXT }

fn Equal  (a: [byte], b: [byte]) -> bool { EXT }

fn EqualFold  (s: [byte], t: [byte]) -> bool { EXT }

fn Fields  (s: [byte]) -> [[byte]] { EXT }

fn FieldsFunc  (s: [byte], f: fn (param0: rune) -> bool) -> [[byte]] { EXT }

fn HasPrefix  (s: [byte], prefix: [byte]) -> bool { EXT }

fn HasSuffix  (s: [byte], suffix: [byte]) -> bool { EXT }

fn Index  (s: [byte], sep: [byte]) -> int { EXT }

fn IndexAny  (s: [byte], chars: string) -> int { EXT }

fn IndexByte  (b: [byte], c: byte) -> int { EXT }

fn IndexFunc  (s: [byte], f: fn (r: rune) -> bool) -> int { EXT }

fn IndexRune  (s: [byte], r: rune) -> int { EXT }

fn Join  (s: [[byte]], sep: [byte]) -> [byte] { EXT }

fn LastIndex  (s: [byte], sep: [byte]) -> int { EXT }

fn LastIndexAny  (s: [byte], chars: string) -> int { EXT }

fn LastIndexByte  (s: [byte], c: byte) -> int { EXT }

fn LastIndexFunc  (s: [byte], f: fn (r: rune) -> bool) -> int { EXT }

fn Map  (mapping: fn (r: rune) -> rune, s: [byte]) -> [byte] { EXT }

fn NewBuffer  (buf: [byte]) -> *Buffer { EXT }

fn NewBufferString  (s: string) -> *Buffer { EXT }

fn NewReader  (b: [byte]) -> *Reader { EXT }

fn Repeat  (b: [byte], count: int) -> [byte] { EXT }

fn Replace  (s: [byte], old: [byte], new: [byte], n: int) -> [byte] { EXT }

fn ReplaceAll  (s: [byte], old: [byte], new: [byte]) -> [byte] { EXT }

fn Runes  (s: [byte]) -> [rune] { EXT }

fn Split  (s: [byte], sep: [byte]) -> [[byte]] { EXT }

fn SplitAfter  (s: [byte], sep: [byte]) -> [[byte]] { EXT }

fn SplitAfterN  (s: [byte], sep: [byte], n: int) -> [[byte]] { EXT }

fn SplitN  (s: [byte], sep: [byte], n: int) -> [[byte]] { EXT }

fn Title  (s: [byte]) -> [byte] { EXT }

fn ToLower  (s: [byte]) -> [byte] { EXT }

fn ToLowerSpecial  (c: unicode.SpecialCase, s: [byte]) -> [byte] { EXT }

fn ToTitle  (s: [byte]) -> [byte] { EXT }

fn ToTitleSpecial  (c: unicode.SpecialCase, s: [byte]) -> [byte] { EXT }

fn ToUpper  (s: [byte]) -> [byte] { EXT }

fn ToUpperSpecial  (c: unicode.SpecialCase, s: [byte]) -> [byte] { EXT }

fn ToValidUTF8  (s: [byte], replacement: [byte]) -> [byte] { EXT }

fn Trim  (s: [byte], cutset: string) -> [byte] { EXT }

fn TrimFunc  (s: [byte], f: fn (r: rune) -> bool) -> [byte] { EXT }

fn TrimLeft  (s: [byte], cutset: string) -> [byte] { EXT }

fn TrimLeftFunc  (s: [byte], f: fn (r: rune) -> bool) -> [byte] { EXT }

fn TrimPrefix  (s: [byte], prefix: [byte]) -> [byte] { EXT }

fn TrimRight  (s: [byte], cutset: string) -> [byte] { EXT }

fn TrimRightFunc  (s: [byte], f: fn (r: rune) -> bool) -> [byte] { EXT }

fn TrimSpace  (s: [byte]) -> [byte] { EXT }

fn TrimSuffix  (s: [byte], suffix: [byte]) -> [byte] { EXT }

impl (self: Buffer) {

fn Bytes  () -> [byte] { EXT }

fn Cap  () -> int { EXT }

fn Grow  (n: int) -> () { EXT }

fn Len  () -> int { EXT }

fn Next  (n: int) -> [byte] { EXT }

fn Read  (p: [byte]) -> Result<int> { EXT }

fn ReadByte  () -> Result<byte> { EXT }

fn ReadBytes  (delim: byte) -> Result<[byte]> { EXT }

fn ReadFrom  (r: io.Reader) -> Result<int64> { EXT }

fn ReadRune  () -> (rune, int, error) { EXT }

fn ReadString  (delim: byte) -> Result<string> { EXT }

fn Reset  () -> () { EXT }

fn String  () -> string { EXT }

fn Truncate  (n: int) -> () { EXT }

fn UnreadByte  () -> error { EXT }

fn UnreadRune  () -> error { EXT }

fn Write  (p: [byte]) -> Result<int> { EXT }

fn WriteByte  (c: byte) -> error { EXT }

fn WriteRune  (r: rune) -> Result<int> { EXT }

fn WriteString  (s: string) -> Result<int> { EXT }

fn WriteTo  (w: io.Writer) -> Result<int64> { EXT }

}

impl (self: Reader) {

fn Len  () -> int { EXT }

fn Read  (b: [byte]) -> Result<int> { EXT }

fn ReadAt  (b: [byte], off: int64) -> Result<int> { EXT }

fn ReadByte  () -> Result<byte> { EXT }

fn ReadRune  () -> (rune, int, error) { EXT }

fn Reset  (b: [byte]) -> () { EXT }

fn Seek  (offset: int64, whence: int) -> Result<int64> { EXT }

fn Size  () -> int64 { EXT }

fn UnreadByte  () -> error { EXT }

fn UnreadRune  () -> error { EXT }

fn WriteTo  (w: io.Writer) -> Result<int64> { EXT }

}

struct Buffer{

}

struct Reader{

}