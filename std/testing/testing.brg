use time


fn AllocsPerRun  (runs: int, f: fn () -> ()) -> float64 { EXT }

fn Benchmark  (f: fn (b: *B) -> ()) -> BenchmarkResult { EXT }

fn CoverMode  () -> string { EXT }

fn Coverage  () -> float64 { EXT }

fn Init  () -> () { EXT }

fn Main  (matchString: fn (pat: string, str: string) -> Result<bool>, tests: [InternalTest], benchmarks: [InternalBenchmark], examples: [InternalExample]) -> () { EXT }

fn MainStart  (deps: testDeps, tests: [InternalTest], benchmarks: [InternalBenchmark], fuzzTargets: [InternalFuzzTarget], examples: [InternalExample]) -> *M { EXT }

fn RegisterCover  (c: Cover) -> () { EXT }

fn RunBenchmarks  (matchString: fn (pat: string, str: string) -> Result<bool>, benchmarks: [InternalBenchmark]) -> () { EXT }

fn RunExamples  (matchString: fn (pat: string, str: string) -> Result<bool>, examples: [InternalExample]) -> bool { EXT }

fn RunTests  (matchString: fn (pat: string, str: string) -> Result<bool>, tests: [InternalTest]) -> bool { EXT }

fn Short  () -> bool { EXT }

fn Verbose  () -> bool { EXT }

impl (self: B) {

fn Cleanup  (f: fn () -> ()) -> () { EXT }

fn Error  (args: VarArgs<any>) -> () { EXT }

fn Errorf  (format: string, args: VarArgs<any>) -> () { EXT }

fn Fail  () -> () { EXT }

fn FailNow  () -> () { EXT }

fn Failed  () -> bool { EXT }

fn Fatal  (args: VarArgs<any>) -> () { EXT }

fn Fatalf  (format: string, args: VarArgs<any>) -> () { EXT }

fn Helper  () -> () { EXT }

fn Log  (args: VarArgs<any>) -> () { EXT }

fn Logf  (format: string, args: VarArgs<any>) -> () { EXT }

fn Name  () -> string { EXT }

fn ReportAllocs  () -> () { EXT }

fn ReportMetric  (n: float64, unit: string) -> () { EXT }

fn ResetTimer  () -> () { EXT }

fn Run  (name: string, f: fn (b: *B) -> ()) -> bool { EXT }

fn RunParallel  (body: fn (param0: *PB) -> ()) -> () { EXT }

fn SetBytes  (n: int64) -> () { EXT }

fn SetParallelism  (p: int) -> () { EXT }

fn Setenv  (key: string, value: string) -> () { EXT }

fn Skip  (args: VarArgs<any>) -> () { EXT }

fn SkipNow  () -> () { EXT }

fn Skipf  (format: string, args: VarArgs<any>) -> () { EXT }

fn Skipped  () -> bool { EXT }

fn StartTimer  () -> () { EXT }

fn StopTimer  () -> () { EXT }

fn TempDir  () -> string { EXT }

}

impl (self: BenchmarkResult) {

fn AllocedBytesPerOp  () -> int64 { EXT }

fn AllocsPerOp  () -> int64 { EXT }

fn MemString  () -> string { EXT }

fn NsPerOp  () -> int64 { EXT }

fn String  () -> string { EXT }

}

impl (self: F) {

fn Add  (args: VarArgs<any>) -> () { EXT }

fn Cleanup  (f: fn () -> ()) -> () { EXT }

fn Error  (args: VarArgs<any>) -> () { EXT }

fn Errorf  (format: string, args: VarArgs<any>) -> () { EXT }

fn Fail  () -> () { EXT }

fn FailNow  () -> () { EXT }

fn Failed  () -> bool { EXT }

fn Fatal  (args: VarArgs<any>) -> () { EXT }

fn Fatalf  (format: string, args: VarArgs<any>) -> () { EXT }

fn Fuzz  (ff: any) -> () { EXT }

fn Helper  () -> () { EXT }

fn Log  (args: VarArgs<any>) -> () { EXT }

fn Logf  (format: string, args: VarArgs<any>) -> () { EXT }

fn Name  () -> string { EXT }

fn Setenv  (key: string, value: string) -> () { EXT }

fn Skip  (args: VarArgs<any>) -> () { EXT }

fn SkipNow  () -> () { EXT }

fn Skipf  (format: string, args: VarArgs<any>) -> () { EXT }

fn Skipped  () -> bool { EXT }

fn TempDir  () -> string { EXT }

}

impl (self: M) {

fn Run  () -> int { EXT }

}

impl (self: PB) {

fn Next  () -> bool { EXT }

}

impl (self: T) {

fn Cleanup  (f: fn () -> ()) -> () { EXT }

fn Deadline  () -> Option<time.Time> { EXT }

fn Error  (args: VarArgs<any>) -> () { EXT }

fn Errorf  (format: string, args: VarArgs<any>) -> () { EXT }

fn Fail  () -> () { EXT }

fn FailNow  () -> () { EXT }

fn Failed  () -> bool { EXT }

fn Fatal  (args: VarArgs<any>) -> () { EXT }

fn Fatalf  (format: string, args: VarArgs<any>) -> () { EXT }

fn Helper  () -> () { EXT }

fn Log  (args: VarArgs<any>) -> () { EXT }

fn Logf  (format: string, args: VarArgs<any>) -> () { EXT }

fn Name  () -> string { EXT }

fn Parallel  () -> () { EXT }

fn Run  (name: string, f: fn (t: *T) -> ()) -> bool { EXT }

fn Setenv  (key: string, value: string) -> () { EXT }

fn Skip  (args: VarArgs<any>) -> () { EXT }

fn SkipNow  () -> () { EXT }

fn Skipf  (format: string, args: VarArgs<any>) -> () { EXT }

fn Skipped  () -> bool { EXT }

fn TempDir  () -> string { EXT }

}

struct B{
  N: int
}

struct BenchmarkResult{
  N: int,
  T: time.Duration,
  Bytes: int64,
  MemAllocs: uint64,
  MemBytes: uint64,
  Extra: Map<string, float64>
}

struct Cover{
  Mode: string,
  Counters: Map<string, [uint32]>,
  Blocks: Map<string, [CoverBlock]>,
  CoveredPackages: string
}

struct CoverBlock{
  Line0: uint32,
  Col0: uint16,
  Line1: uint32,
  Col1: uint16,
  Stmts: uint16
}

struct F{

}

struct InternalBenchmark{
  Name: string,
  F: fn (b: *B) -> ()
}

struct InternalExample{
  Name: string,
  F: fn () -> (),
  Output: string,
  Unordered: bool
}

struct InternalFuzzTarget{
  Name: string,
  Fn: fn (f: *F) -> ()
}

struct InternalTest{
  Name: string,
  F: fn (param0: *T) -> ()
}

struct M{

}

struct PB{

}

struct T{

}

interface TB {

  fn Cleanup (param0: fn () -> ()) -> ()
  fn Error (args: VarArgs<any>) -> ()
  fn Errorf (format: string, args: VarArgs<any>) -> ()
  fn Fail () -> ()
  fn FailNow () -> ()
  fn Failed () -> bool
  fn Fatal (args: VarArgs<any>) -> ()
  fn Fatalf (format: string, args: VarArgs<any>) -> ()
  fn Helper () -> ()
  fn Log (args: VarArgs<any>) -> ()
  fn Logf (format: string, args: VarArgs<any>) -> ()
  fn Name () -> string
  fn Setenv (key: string, value: string) -> ()
  fn Skip (args: VarArgs<any>) -> ()
  fn SkipNow () -> ()
  fn Skipf (format: string, args: VarArgs<any>) -> ()
  fn Skipped () -> bool
  fn TempDir () -> string
}